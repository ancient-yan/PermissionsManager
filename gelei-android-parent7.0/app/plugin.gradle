apply plugin: 'channel'

/**
 * bugly文档
 * https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix-demo/
 */

def enableTinkerHotFixing = openTinker.toBoolean()

/*Tinker apk 路径*/
def tinkerBackupPath = file("apk/tinker/")
/*渠道包存储路径*/
def channelBackupPath = file("apk/channel/")
/*加固后的apk存储路径*/
def jiaguChannelBackupPath = file("apk/jiagu/")
//此处填写每次构建生成的基准包目录
def baseApkDir = "apk/origin/7.0.2"

ext {
    //如果要针对 app-7.0.0.apk 打补丁，则按下面 baseApkPath 路径就是：apk/origin/7.0.0/app-7.0.0.apk
    baseApkPath = "${baseApkDir}/app-7.0.2.apk"
    //baseApkResourceMappingPath = "${tinkerBackupPath}/${baseApkDir}/flavors_product/app-flavors_product-release-R.txt"
    baseApkResourceMappingPath = "${baseApkDir}/app-flavors_product-release-R.txt"

    //加固后，用于生成渠道包的基线 apk
//    jiaguBaseAPKPath = file("${jiaguChannelBackupPath}/${rootProject.versionName}-huawei/app-${rootProject.versionName}.apk")
    jiaguBaseAPKPath = file("${jiaguChannelBackupPath}/${rootProject.versionName}/app-${rootProject.versionName}.apk")
}

rebuildChannel {
    channelFile = file("channel.txt")
    baseReleaseApk = file(jiaguBaseAPKPath)
    releaseOutputDir = file("$channelBackupPath/${rootProject.versionName}-huawei/release")
//    releaseOutputDir = file("$channelBackupPath/${rootProject.versionName}/release")
    //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上）
    isFastMode = false
}

if (enableTinkerHotFixing) {
    apply plugin: 'com.tencent.bugly.tinker-support'

    /*
    打补丁：
        测试补丁：gradlew :app:buildTinkerPatchFlavors_productDebug
        生成补丁：gradlew :app:buildTinkerPatchFlavors_productRelease
    */

    /* 对于插件各参数的详细解析请参考 */
    tinkerSupport {

        // 指定归档目录，默认值当前module的子目录 tinker
        autoBackupApkDir = "${tinkerBackupPath}"

        //建议设置true,用户就不用再自己管理tinkerId的命名,插件会为每一次构建的base包自动生成唯一的tinkerId，默认命名规则是versionname.versioncode_时间戳
        //具体参考https://github.com/BuglyDevTeam/Bugly-Android-Demo/wiki/Tinker-ID%E8%AF%A5%E6%80%8E%E4%B9%88%E8%AE%BE%E7%BD%AE
        autoGenerateTinkerId = true

        // 是否启用覆盖tinkerPatch配置功能，默认值false
        // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch
        overrideTinkerPatchConfiguration = true

        // 编译补丁包时，必需指定基线版本的apk，默认值为空， 如果为空，则表示不是进行补丁包的编译，@{link tinkerPatch.oldApk }
        setBaseApk(baseApkPath)

        // 对应tinker插件applyResourceMapping
        setBaseApkResourceMapping(baseApkResourceMappingPath)

        // 是否启用加固模式，默认为false.(tinker-support 1.0.7起支持）
        isProtectedApp = true

        // 是否开启反射Application模式
        enableProxyApplication = true

        // 是否支持新增非 export 的 Activity（注意：设置为 true 才能修改AndroidManifest文件）
        supportHotplugComponent = true
    }

/**
 * 一般来说,我们无需对下面的参数做任何的修改， 对于各参数的详细介绍请参考: https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
 */
    tinkerPatch {
        ignoreWarning = false
        useSign = true
        dex {
            dexMode = "jar"
            pattern = ["classes*.dex"]
            loader = []
        }
        lib {
            pattern = ["lib/*/*.so"]
        }

        res {
            pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            ignoreChange = []
            largeModSize = 100
        }

        packageConfig {
        }

        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
        }

        buildConfig {
            keepDexApply = false
        }

    }

}
